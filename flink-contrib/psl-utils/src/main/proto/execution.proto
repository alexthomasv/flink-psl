// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to you under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package proto.execution;

enum ProtoTransactionOpType {
    // For KV store style operations
    NOOP = 0;
    READ = 1;
    WRITE = 2;

    // For counter style operations
    INCREMENT = 3;
    CAS = 4;
    // DECREMENT = 4; <-- For decrement send, INCREMENT with negative value

    // For reconfiguration
    ADD_LEARNER = 5;
    UPGRADE_FULL_NODE = 6;
    DEL_LEARNER = 7;
    DOWNGRADE_FULL_NODE = 8;

    // For SQL and other operations
    CUSTOM = 9;

    // To check for byz commit
    PROBE = 10;
}

message ProtoTransactionOp {
    ProtoTransactionOpType op_type = 1;
    repeated bytes operands = 2;
}

message ProtoTransactionPhase {
    repeated ProtoTransactionOp ops = 1;
}

message ProtoTransaction {
    ProtoTransactionPhase on_receive = 1;
    ProtoTransactionPhase on_crash_commit = 2;
    ProtoTransactionPhase on_byzantine_commit = 3;
    bool is_reconfiguration = 4;
    bool is_2pc = 5;
}

message ProtoTransactionOpResult {
    bool success = 1;
    repeated bytes values = 2;
}

message ProtoTransactionResult {
    repeated ProtoTransactionOpResult result = 1;
}